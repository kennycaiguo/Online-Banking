/**
 * TypeCast in all queries left
 */
package com.igate.ibank.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.igate.ibank.bean.AccountMaster;
import com.igate.ibank.bean.Customer;
import com.igate.ibank.exception.IbankException;
import com.igate.ibank.util.DatabaseUtil;

/**
 * @author trgl1
 * 
 */

public class AccountMasterDao {
	private Connection connection;
	private DatabaseUtil dbUtil;

	public AccountMasterDao() throws IbankException {
		dbUtil = DatabaseUtil.getInstance();
	}

	/*
	 * Adds account and returns account Number if successful else returns 0
	 */
	public AccountMaster addAccountMaster(AccountMaster am) throws IbankException {

		connection = dbUtil.getConnection();
		int rowCount = 0;
		long accNum = 0;
		CustomerDao custDao;

		
		try {

			// Not sure how to generate account number
			/*
			 * do{ accNum=generateRandom(10); String checkAccNumQuery=
			 * "SELECT COUNT(*) FROM AccountMaster WHERE Account_ID="
			 * +accNum;//Type Cast accNum PreparedStatement pstCheck; try {
			 * pstCheck = connection.prepareStatement(checkAccNumQuery);
			 * 
			 * } catch (SQLException e) { throw new
			 * IbankException("Account number generation ecxeption"
			 * +e.getMessage()); }
			 * 
			 * }while(rowCount>0);
			 */

			// account_master_sequence sequence used
			String insertAccQuery = "INSERT INTO AccountMaster VALUES(account_master_sequence.nextval,?,?,SYSDATE,?)";

			PreparedStatement pst = connection.prepareStatement(insertAccQuery);

			pst.setString(1, am.getAccountType());
			pst.setDouble(2, am.getAccountBalance());
			pst.setLong(3, am.getCust().getCustomerId());
			rowCount = pst.executeUpdate();
			System.out.println(am);

			// Returning id generated by sequence
			if (rowCount == 1) {
				custDao=new CustomerDao();
				
				String getAccId = "SELECT * FROM AccountMaster WHERE Account_ID=(SELECT max(Account_ID) FROM AccountMaster)";
				PreparedStatement getpst = connection
						.prepareStatement(getAccId);
				ResultSet rs = getpst.executeQuery();
				if (rs.next()) {
					am.setAccountId(rs.getLong(1));
					Customer cust=custDao.getCustomer(rs.getLong(5));
					am.setCust(cust);
					am.setOpenDate(rs.getDate(4));
				}
			}

		} catch (SQLException e) {
			e.printStackTrace();
			throw new IbankException(e.getMessage());
		} finally {
			dbUtil.releaseConnection();
		}
		System.out.println(am);
		return am;
	}

	/*
	 * Update balance of account taking account number,account Balance and
	 * credit/debit boolean as input and return true if updated else false:
	 */
	public boolean updateCustomerBalance(long accountNumber, boolean credDebit,
			float amount) throws IbankException {
		connection = dbUtil.getConnection();
		int successUpdate = 0;
		String creditUpdateQuery = "UPDATE AccountMaster SET Account_Balance=Account_Balance+? WHERE Account_ID=?";
		System.out.println(accountNumber + " " + credDebit + " " + amount);
		try {
			PreparedStatement pst = connection
					.prepareStatement(creditUpdateQuery);
			// credDebit:credit:+:true ||credDebit:debit:+:false
			if (credDebit) {
				pst.setFloat(1, amount);
				pst.setLong(2, accountNumber);
				successUpdate = pst.executeUpdate();
			} else {

				AccountMaster am = getAccountDetail(accountNumber);
				if (am.getAccountBalance() > amount) {
					pst.setFloat(1, -amount);
					pst.setLong(2, accountNumber);
					successUpdate = pst.executeUpdate();
				} else {
					throw new IbankException("No sufficient Balance");
				}
			}

		} catch (SQLException e) {
			e.printStackTrace();
			throw new IbankException("User not updated " + e.getMessage());

		} finally {
			dbUtil.releaseConnection();

		}
		return successUpdate > 0;
	}

	/*
	 * Returns the user of specific accountId
	 */
	public AccountMaster getAccountDetail(long accountId) throws IbankException {
		connection = dbUtil.getConnection();
		CustomerDao cd = new CustomerDao();
		AccountMaster accountDetail = null;
		try {
			PreparedStatement preparedStatement = connection
					.prepareStatement("Select * FROM AccountMaster "
							+ "WHERE Account_ID  = ?");

			preparedStatement.setLong(1, accountId);
		
			ResultSet rs = preparedStatement.executeQuery();
			rs.next();
			
			Customer customer = new Customer();
			
			customer = cd.getCustomer(rs.getInt("Customer_ID"));
			accountDetail = new AccountMaster(rs.getLong("Account_ID"),
					rs.getString("Account_Type"),
					rs.getFloat("Account_Balance"), rs.getDate("Open_Date"),
					customer);

		} catch (SQLException e) {
			e.printStackTrace();
			throw new IbankException(e.getMessage());
		} finally {
		//	dbUtil.releaseConnection();

		}
		return accountDetail;
	}

	
	
	
	/*
	 * Returns all accounts from customer Id
	 */
	public List<AccountMaster> getAccountDetailsFrmCustId(long customerId) throws IbankException {
		connection = dbUtil.getConnection();
		CustomerDao cd = new CustomerDao();
		List<AccountMaster> accountList = null;
		AccountMaster accountDetail=null;
		Customer customer =null;
		try {
			PreparedStatement preparedStatement = connection
					.prepareStatement("Select * FROM AccountMaster WHERE CUSTOMER_ID=?");

			preparedStatement.setLong(1, customerId);
		
			ResultSet rs = preparedStatement.executeQuery();
			customer = new Customer();
			customer = cd.getCustomer(customerId);
			accountList=new ArrayList<AccountMaster>();
			while(rs.next()){
				accountDetail=new AccountMaster();
				accountDetail = new AccountMaster(rs.getLong("Account_ID"),
						rs.getString("Account_Type"),
						rs.getFloat("Account_Balance"), rs.getDate("Open_Date"),
						customer);
				accountList.add(accountDetail);
			}
			

		} catch (SQLException e) {
			e.printStackTrace();
			throw new IbankException(e.getMessage());
		} finally {
		//	dbUtil.releaseConnection();

		}
		return accountList;
	}
	
	


}
